openapi: 3.0.3
info:
  title: Simplified user API specification
  description: |-
    This openapi document describes user API.
  version: "1"
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Sami
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
  /:
    get:
      tags: ["home"]
      summary: Home page
      description: |-
        This is the feed for authenticated users.
      operationId: getMyStream
      responses:
        '200':
          description: Feed
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Sami"
                    identifier:
                      type: string
                      example: "sami5609"
  /users:
    get:
      tags: ["user"]
      summary: Get all users
      operationId: getUsers
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Sami
                    identifier:
                      type: string
                      example: "sami5609"
  /users/{username}:
    parameters:
      - name: username
        in: path
        required: true
        description: Name of the user
        schema:
          type: string
          example: "Sami"
    get:
      tags: ["user_profile"]
      summary: Get user profile
      operationId: getUserProfile
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Sami"
                  identifier:
                    type: string
                    example: "Sami5609"
        '404':
          description: User not found

  /users/{username}/follow:
    parameters:
      - name: username
        in: path
        required: true
        description: Name of the user
        schema:
          type: string
          example: Hasan
    post:
      tags: ["follow_user"]
      description: Follow a user
      operationId: followUser
      responses:
        '200':
          description: User followed successfully
        '404':
          description: User not found

    delete:
      tags: ["unfollow_user"]
      description: Unfollow a user
      operationId: unfollowUser
      responses:
        '200':
          description: User unfollowed successfully
        '404':
          description: User not found
    
  /users/{username}/ban:
    parameters:
      - name: username
        in: path
        required: true
        description: Name of the user
        schema:
          type: string
          example: Hasan
    post:
      tags: ["ban_user"]
      description: Ban a user
      operationId: banUser
      responses:
        '200':
          description: User banned successfully
        '404':
          description: User not found
    delete:
      tags: ["unban_user"]
      description: Unban a user
      operationId: unbanUser
      responses:
        '200':
          description: User unbanned successfully
        '404':
          description: User not found
    
  /myProfile:  
    put:
      tags: ["setMyUser_name"]
      description: Set my user name
      operationId: setMyUserName
      responses:
        '200':
          description: User name set successfully
        '404':
          description: User not found

  /photos:
    post:
      tags: ["uploadPhoto"]
      description: Upload photo
      operationId: uploadPhoto
      responses:
        '201':
          description: Photo uploaded successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /photos/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Id of the photo
        schema:
          type: integer
          example: 23

    post:
      tags: ["likePhoto"]
      description: Like photo
      operationId: likePhoto
      responses:
        '200':
          description: Photo liked successfully
        '404':
          description: Photo not found

    put:
      tags: ["unlikePhoto"]
      description: Unlike photo
      operationId: unlikePhoto
      responses:
        '200':
          description: Photo unliked successfully
        '404':
          description: Photo not found

    delete:
      tags: ["deletePhoto"]
      description: Delete photo
      operationId: deletePhoto
      responses:
        '200':
          description: Photo deleted successfully
        '404':
          description: Photo not found

  /photos/{id}/comments:
    parameters:
      - name: id
        in: path
        required: true
        description: Id of the photo
        schema:
          type: integer
          example: 23
    post:
      tags: ["comment_Photo"]
      description: Comment photo
      operationId: commentPhoto
      responses:
        '201':
          description: Comment added successfully
        '404':
          description: Photo not found
    delete:
      tags: ["uncomment_Photo"]
      description: Uncomment photo
      operationId: uncommentPhoto
      responses:
        '200':
          description: Comment removed successfully
        '404':
          description: Photo not found
      

components:
  responses:
    Unauthorized:
      description: The access token is missing or it's expired
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc)
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs


              
